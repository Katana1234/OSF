***********  use of posif ******************

- when a change occurs on hall sensor, posif.out sent a signal to ccu4 slice 0 Input0
- this rising edge activates the function clear & start timer on CCU4 slice 0
- when ccu4 timer reaches compare register, ccu4 ST changes (go high)
- this changes is received by posif on dsel 
- rising edge of dsel on posif generates a sample of hall pins
- if the sample == current , nothing happens
- if sample == expected,
    - in posif : shadow registers (current and expected patterns) are copied in active registers
    - in posif: shadow registers becomes 0 0 (and must be reloaded)
    - in posif a service request 0 is generated; it can be handled by POSIT0_1_IRQ to upload new value in shadow reg
     (in fact, this could also be done by the interrupt generated by ccu4 slice 1 on compare match)
    - in posif : posif set OUT1 high and this signal is connected to CCU4 slice 1 input 0
    - in CCU4 slice 1 = this input signal activates an envent 0 that generates
            - a function "capture" of the current value of the timer (this value can be read to know the interval)
            - a clear & start of the timer
            - a service request 0 that can be used e.g. in an interrupt CCU4_0_0_IRQ to get the capured value
                note: reading the value, reset a flag ; this allows to know if it is a new value or nothing
        note: when timer count up to 0XFFFF but it can be changed (with prescaler = 256, 1 tick = 4 usec, so max = 65536 *4 = 0,262 sec)
        with 6 phases per electrical rotation and 4 poles, this is equivalent to a rps of 0,15 = about 10 rpm
        This could generate an CCU4 SR1 but it is not yet done because at power with 15° per 0,5 sec the limit is reached.
- if sample is not the expected, it is possible just to discard or to stop some process. Anyway OUT3 is set
    if IDLE is activated in the setup, a wrong pattern can generate an OU2 that can be used to stop the PWM
    currently in case of wrong pattern, there are no action generated by POSIF
notes : when slice 1 count up to the end of the period, ccu4 generates a service request 1 to say that motor is running slow
This SR1 could be manage to stop the motor state by an ISR

Still, in this version, we do not use posif to check for the validy of transition nor to measure the enlapsed time between 2 transitions
Posif detects hall pattern change (valid or not) and trigger CCU4 slice 0.
This one generates an IRQ to capture the hall pattern and the value of a running timer CCU4 slice 2 (250Khz = 4usec per tick)


-------- use of vadc and ccu8
ccu8 slice 0,1,2 are used to generate PWM . 
They are configured as center align, with prescaler = 1 (to get 64Mz ; this is 4X the freq of TSDZ2)
Period is 1680 (4*420) (so one cycle is 3360 clocks and so one tick every 15,625 nsec, => 19Khz => 26us per cycle = tSDZ2)
CC8 slice 3 is used to generate 2 IRQ : one when counting up at 840 (4*210) (SR0), and the other (SR1) at 840 counting down
CC8 slice 3 generates also a SR3 at period match and a SR2 at one match;
Those are connected to:
- VADC group 0 to trigger the queue and so measure total current (pin 2.8)
- VADC group 1 to trigger the queue and so measure total current (pin 2.8)
NOte:  the connection of SR2 can't be done within device manager because this tool accept only one connection between CCU8 and VADC
So set up of this connection is done in main.c

The 2 queues are used to measure also other voltages (battery, throttle, torque)
I do not know if it is right to measure total current at period match and one match because all 3 mosfets are ON (on low side in one case and high side in the other one).
It should probably be OK if there is some hardware filter. To be tested.
There seems to be quite big variations in ADC conversion for current.

In device configurator, it is possible to setup a channel event (per channel) when the ADC value is e.g. out of limits.
Still, it seems that it is not possible to let the channel event generates a service request.
It is then required to use 
VADC_GROUP_ChannelSetEventInterruptNode	(	XMC_VADC_GROUP_t *const 	group_ptr,
const uint32_t 	ch_num,
const XMC_VADC_SR_t 	sr 
)
And also it is required to add the 2 lines of code for NIVC to get the interrupt
Note:  per group only SR0 and SR1 can be connected to NIVC (17,18 for group 0 and 19,20 for group 1)

---------------  DETECT_HALL_SENSORS_POSITIONS ------------------------
It seems that hall sensors are not perfectly aligned and not eaqualy separated by 120°
To find the positions, there is a special process that rotates slowly the magnetic field in forward and then in reverse direction.
This is activated by a define in main.h : #define PROCESS must be set on DETECT_HALL_SENSORS_POSITIONS
It is possible in main.h to select also:
- the duty cycle to be used (abour 20 or 30) in order to avoid a to big current
- the wait time (ms) at each angle.
This process gives the results on the Jlink and then stops the firmware.
The results have to be introduced in motor.c in ui8_hall_ref_angles[8]



---------------  set up to find best global hall offset ------------------------
It is important to find the best offset angle to apply between sensor positions and magnetic flux.
There is a process to help finding it.
In main.h, there is a #define PROCESS to be set on FIND_BEST_GLOBAL_HALL_OFFSET.
When activated, the program will try different values for global_hall_offset (one every 4 sec)
It starts from FIRST_OFFSET_ANGLE_FOR_CALIBRATION up to LAST_OFFSET_ANGLE_FOR_CALIBRATION by step of CALIBRATE_OFFSET_STEP
The results are displayed on Jlink.
It is important to look at the offset that gives the lowest current.
Note: the motor runs only when the offset in within a quite limitted range and the current can change a lot.
So this must be use carrefully (e.g. with only a small current and duty cycle)

--------------- Testing the motor/firmware --------------------------------
It is possible to test the motor without using the different assist mode.
This is useful for debugging.
In main.h, there is a #define PROCESS ;  it can be set on
- TEST_WITH_FIXED_DUTY_CYCLE   ; you have also to specify the duty cycle and the max ADC current (1= 0,16A)
- TEST_WITH_THROTTLE           ; you have also to specify max ADC current (1= 0,16A)


------------- segger rtt --------------
Here a link that explains the way Jlink can be used instead of uart to get debug message and/or send commands
https://kb.segger.com/RTT#SEGGER_RTT_printf()
It requires adding:
    - SEGGER_RTT_Init ();     
    - SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
Then it is possible to uses code like
    SEGGER_RTT_WriteString(0, RTT_CTRL_CLEAR); // clear the RTT terminal
    or
    SEGGER_RTT_printf(0, "Retry CCU8 start; still %u try\r\n", retry_counter);

    For printf, the syntax is            
    %[flags][FieldWidth][.Precision]ConversionSpecifier
    where flags can be
        -	= Left justify within the field width
        +	= Always print sign extension for signed conversions
        0	= Pad with 0 instead of spaces. Ignored when using '-'-flag or precision
    where conversion speecifier is
        c one char
        d signed integer
        u unsigned integer
        x hexadecimal integer
        s string
        p   8-digit hexadecimal integer. (Argument shall be a pointer to void.)

------------- CCU4 ----------------
- slice 0 is used to add a delay for sampling the hall sensors when a change occurs
- slice 1 was foreseen to measure the time between 2 patterns (if valid)
- slice 2 is used as running counter to measure the delay between last pattern change and current irq0 from ccu8  (when timer is running up)
- slice 3 is used to generate the PWM signal for torque (a pulse of 2,5us every 20 usec)

---------  vadc ------
A test with a battery with 37V gives a adc = 1720. This supposes a voltage on XMC pin of 1720 * 5V / 4096 steps = 2,099V
    Doc for tsdz2 says that a battery of 34,6V gives 1,99V on the xmc pin
    The 2 ratios are the sample
    So - BATTERY_VOLTAGE_PER_10_BIT_ADC_STEP_X1000 should be the same (if TSDZ8 ADC is reduced to 10 bits)

Note : when the controller is powered by the Jlink , the conversions does not seems ok.
Perhaps there is an issue with the calibration when VCC change? 

--------  display -------
The data being transmitted (for field Km/h on display) are in fact inverted (1/value)
The max value transmitted that is displayed is 1000 and gives 3,7km/h on the display
Transmitting 500 gives 7,4 kmh/h on the display.
Lowest values to transmit are probably around 60 (so a little more than 65 km/h)
But the values being transmitted depends on the selected diameter of the wheel.
This diameter is transmitted by the display to the controller and the controller takes it into accout to calculate the value to transmit

By default, the numerator used for conversion = 37310 (for wheel = ???)

So, it is not possible to view on the display current that are less than 3,7 A (display gives then 0)

------------ detect hall positions --------------------
